package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"
	"time"

	"github.com/d-leme/chatql/graph/model"
	"github.com/google/uuid"
)

// AddMessage is the resolver for the addMessage field.
func (r *mutationResolver) AddMessage(ctx context.Context, channelID string, content string) (*model.Message, error) {
	message := &model.Message{
		ID:        uuid.New().String(),
		Content:   content,
		CreatedAt: time.Now(),
		Owner:     "Jane Smith",
	}

	r.MU.Lock()
	if _, err := r.DB.Exec("INSERT INTO messages (id, content, created_at, channel_id) VALUES (?, ?, ?, ?)",
		message.ID, message.Content, message.CreatedAt, channelID); err != nil {
		r.MU.Unlock()
		return nil, err
	}

	if subs, ok := r.Subscriptions[channelID]; ok {
		for _, subscriber := range subs {
			subscriber <- message
		}
	}
	r.MU.Unlock()

	return message, nil
}

// CreateChannel is the resolver for the createChannel field.
func (r *mutationResolver) CreateChannel(ctx context.Context, name string) (*model.Channel, error) {
	channel := &model.Channel{
		ID:   uuid.New().String(),
		Name: name,
	}

	r.MU.Lock()
	if _, err := r.DB.Exec("INSERT INTO channels (id, name) VALUES (?, ?)",
		channel.ID, channel.Name); err != nil {
		r.MU.Unlock()
		return nil, err
	}
	r.MU.Unlock()

	return channel, nil
}

// Channels is the resolver for the channels field.
func (r *queryResolver) Channels(ctx context.Context) ([]*model.Channel, error) {
	r.MU.Lock()
	rows, err := r.DB.Query("SELECT id, name FROM channels")
	r.MU.Unlock()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var channels []*model.Channel
	for rows.Next() {
		channel := &model.Channel{}
		if err := rows.Scan(&channel.ID, &channel.Name); err != nil {
			return nil, err
		}
		channels = append(channels, channel)
	}

	return channels, nil
}

// MessageAdded is the resolver for the messageAdded field.
func (r *subscriptionResolver) MessageAdded(ctx context.Context, channelID string) (<-chan *model.Message, error) {
	id := uuid.New().String()
	messageChannel := make(chan *model.Message)

	fmt.Printf("MessageAdded subscription triggered for channel %s, subscriptionId=%s\n", channelID, id)

	r.MU.Lock()
	if r.Subscriptions[channelID] == nil {
		r.Subscriptions[channelID] = make(map[string]chan *model.Message)
	}
	r.Subscriptions[channelID][id] = messageChannel
	r.MU.Unlock()

	go func() {
		<-ctx.Done()
		r.MU.Lock()
		delete(r.Subscriptions[channelID], id)
		r.MU.Unlock()
	}()

	return messageChannel, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
